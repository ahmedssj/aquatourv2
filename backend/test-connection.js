const { testConnection, executeQuery } = require('./config/database');
require('dotenv').config();

async function testDatabaseConnection() {
  console.log('üß™ Probando conexi√≥n a la base de datos...');
  console.log(`üìä Host: ${process.env.DB_HOST}`);
  console.log(`üìä Base de datos: ${process.env.DB_NAME}`);
  console.log(`üë§ Usuario: ${process.env.DB_USER}`);
  
  try {
    // Probar conexi√≥n b√°sica
    const isConnected = await testConnection();
    if (!isConnected) {
      throw new Error('No se pudo conectar a la base de datos');
    }

    // Verificar tablas existentes
    console.log('\nüìã Verificando tablas existentes...');
    const tables = await executeQuery(`
      SELECT TABLE_NAME, TABLE_ROWS, CREATE_TIME 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_SCHEMA = ?
      ORDER BY TABLE_NAME
    `, [process.env.DB_NAME]);

    if (tables.length === 0) {
      console.log('‚ö†Ô∏è No se encontraron tablas en la base de datos');
      console.log('üí° Aseg√∫rate de haber ejecutado el script de creaci√≥n de tablas');
      return;
    }

    console.log(`‚úÖ Encontradas ${tables.length} tablas:`);
    tables.forEach(table => {
      console.log(`  - ${table.TABLE_NAME} (${table.TABLE_ROWS || 0} filas)`);
    });

    // Verificar estructura de tabla Usuario
    console.log('\nüë§ Verificando estructura de tabla Usuario...');
    try {
      const userColumns = await executeQuery(`
        SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE, COLUMN_DEFAULT
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'Usuario'
        ORDER BY ORDINAL_POSITION
      `, [process.env.DB_NAME]);

      if (userColumns.length > 0) {
        console.log('‚úÖ Estructura de tabla Usuario:');
        userColumns.forEach(col => {
          console.log(`  - ${col.COLUMN_NAME}: ${col.DATA_TYPE} ${col.IS_NULLABLE === 'NO' ? '(NOT NULL)' : ''}`);
        });
      } else {
        console.log('‚ö†Ô∏è Tabla Usuario no encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error verificando tabla Usuario:', error.message);
    }

    // Verificar datos de ejemplo
    console.log('\nüìä Verificando datos existentes...');
    
    try {
      const roleCount = await executeQuery('SELECT COUNT(*) as count FROM Rol');
      console.log(`‚úÖ Roles: ${roleCount[0].count} registros`);
      
      if (roleCount[0].count > 0) {
        const roles = await executeQuery('SELECT rol FROM Rol');
        console.log('  Roles disponibles:', roles.map(r => r.rol).join(', '));
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error verificando roles:', error.message);
    }

    try {
      const userCount = await executeQuery('SELECT COUNT(*) as count FROM Usuario');
      console.log(`‚úÖ Usuarios: ${userCount[0].count} registros`);
      
      if (userCount[0].count > 0) {
        const users = await executeQuery(`
          SELECT u.nombre, u.apellido, u.correo, r.rol 
          FROM Usuario u 
          LEFT JOIN Rol r ON u.id_rol = r.id_rol 
          LIMIT 5
        `);
        console.log('  Usuarios de ejemplo:');
        users.forEach(user => {
          console.log(`    - ${user.nombre} ${user.apellido} (${user.correo}) - ${user.rol || 'Sin rol'}`);
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error verificando usuarios:', error.message);
    }

    try {
      const providerCount = await executeQuery('SELECT COUNT(*) as count FROM Proveedores');
      console.log(`‚úÖ Proveedores: ${providerCount[0].count} registros`);
    } catch (error) {
      console.log('‚ö†Ô∏è Error verificando proveedores:', error.message);
    }

    // Probar consulta de login
    console.log('\nüîê Probando consulta de login...');
    try {
      const loginTest = await executeQuery(`
        SELECT u.*, r.rol as rol_nombre 
        FROM Usuario u 
        INNER JOIN Rol r ON u.id_rol = r.id_rol 
        WHERE u.correo = ?
        LIMIT 1
      `, ['superadmin@aquatour.com']);

      if (loginTest.length > 0) {
        console.log('‚úÖ Consulta de login funciona correctamente');
        console.log(`  Usuario encontrado: ${loginTest[0].nombre} ${loginTest[0].apellido}`);
        console.log(`  Rol: ${loginTest[0].rol_nombre}`);
      } else {
        console.log('‚ö†Ô∏è No se encontr√≥ usuario de prueba para login');
      }
    } catch (error) {
      console.log('‚ùå Error en consulta de login:', error.message);
    }

    console.log('\nüéâ ¬°Prueba de conexi√≥n completada exitosamente!');
    console.log('\nüìã Resumen:');
    console.log('‚úÖ Conexi√≥n a MySQL establecida');
    console.log('‚úÖ Estructura de base de datos verificada');
    console.log('‚úÖ Datos de ejemplo disponibles');
    console.log('‚úÖ Consultas de autenticaci√≥n funcionando');
    
    console.log('\nüöÄ Tu base de datos est√° lista para usar con la API!');
    console.log('\nüë• Usuarios de prueba disponibles:');
    console.log('  - superadmin@aquatour.com / superadmin123');
    console.log('  - davidg@aquatour.com / Osquitar07');
    console.log('  - asesor@aquatour.com / asesor123');

  } catch (error) {
    console.error('‚ùå Error en la prueba de conexi√≥n:', error);
    process.exit(1);
  }
}

// Ejecutar prueba
testDatabaseConnection().then(() => {
  console.log('\n‚úÖ Prueba completada');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Error:', error);
  process.exit(1);
});
